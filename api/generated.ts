/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * NestJS API
 * API documentation for NestJS with Swagger, Orval, and MikroORM
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddSectorConfigDto,
  CreateAuthDto,
  CreateFuncionarioDto,
  CreateGestorDto,
  CreateHistoricoProducaoDto,
  CreateMotivoInterrupcaoDto,
  CreateOrderDto,
  CreateProductDto,
  CreateSectorDto,
  Etapa,
  LoginDto,
  Order,
  OrderTracking,
  OrdersControllerAtualizarStatusBody,
  OrdersControllerCreateEtapaBody,
  TrackOrderDto,
  UpdateFuncionarioDto,
  UpdateGestorDto,
  UpdateHistoricoProducaoDto,
  UpdateProductDto,
  UpdateSectorDto
} from './model'



export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.get(
      `/`,options
    );
  }


export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>



export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar um novo pedido
 */
export const ordersControllerCreate = (
    createOrderDto: CreateOrderDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/orders`,
      createOrderDto,options
    );
  }



export const getOrdersControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: CreateOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: CreateOrderDto}, TContext> => {
    
const mutationKey = ['ordersControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreate>>, {data: CreateOrderDto}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreate>>>
    export type OrdersControllerCreateMutationBody = CreateOrderDto
    export type OrdersControllerCreateMutationError = AxiosError<unknown>

    /**
 * @summary Criar um novo pedido
 */
export const useOrdersControllerCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: CreateOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreate>>,
        TError,
        {data: CreateOrderDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os pedidos
 */
export const ordersControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders`,options
    );
  }


export const getOrdersControllerFindAllQueryKey = () => {
    return [`/orders`] as const;
    }

    
export const getOrdersControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerFindAll>>> = ({ signal }) => ordersControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerFindAll>>>
export type OrdersControllerFindAllQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os pedidos
 */

export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Iniciar o rastreamento de uma ordem
 */
export const ordersControllerStartTracking = (
    trackOrderDto: TrackOrderDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/orders/start-tracking`,
      trackOrderDto,options
    );
  }



export const getOrdersControllerStartTrackingMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: TrackOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: TrackOrderDto}, TContext> => {
    
const mutationKey = ['ordersControllerStartTracking'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerStartTracking>>, {data: TrackOrderDto}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerStartTracking(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerStartTrackingMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerStartTracking>>>
    export type OrdersControllerStartTrackingMutationBody = TrackOrderDto
    export type OrdersControllerStartTrackingMutationError = AxiosError<unknown>

    /**
 * @summary Iniciar o rastreamento de uma ordem
 */
export const useOrdersControllerStartTracking = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: TrackOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerStartTracking>>,
        TError,
        {data: TrackOrderDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerStartTrackingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalizar o rastreamento de uma ordem
 */
export const ordersControllerEndTracking = (
    id: number,
    trackOrderDto: TrackOrderDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void | OrderTracking>> => {
    
    
    return axios.post(
      `/orders/end-tracking/${id}`,
      trackOrderDto,options
    );
  }



export const getOrdersControllerEndTrackingMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: TrackOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: TrackOrderDto}, TContext> => {
    
const mutationKey = ['ordersControllerEndTracking'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerEndTracking>>, {id: number;data: TrackOrderDto}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerEndTracking(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerEndTrackingMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerEndTracking>>>
    export type OrdersControllerEndTrackingMutationBody = TrackOrderDto
    export type OrdersControllerEndTrackingMutationError = AxiosError<unknown>

    /**
 * @summary Finalizar o rastreamento de uma ordem
 */
export const useOrdersControllerEndTracking = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: TrackOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerEndTracking>>,
        TError,
        {id: number;data: TrackOrderDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerEndTrackingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter relat√≥rio de uma ordem
 */
export const ordersControllerGetOrderReport = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/report/${id}`,options
    );
  }


export const getOrdersControllerGetOrderReportQueryKey = (id: number,) => {
    return [`/orders/report/${id}`] as const;
    }

    
export const getOrdersControllerGetOrderReportQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerGetOrderReportQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>> = ({ signal }) => ordersControllerGetOrderReport(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerGetOrderReportQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>>
export type OrdersControllerGetOrderReportQueryError = AxiosError<unknown>


/**
 * @summary Obter relat√≥rio de uma ordem
 */

export function useOrdersControllerGetOrderReport<TData = Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerGetOrderReportQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar uma nova etapa para uma ordem
 */
export const ordersControllerCreateEtapa = (
    id: number,
    ordersControllerCreateEtapaBody: OrdersControllerCreateEtapaBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/orders/${id}/etapas`,
      ordersControllerCreateEtapaBody,options
    );
  }



export const getOrdersControllerCreateEtapaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: OrdersControllerCreateEtapaBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: OrdersControllerCreateEtapaBody}, TContext> => {
    
const mutationKey = ['ordersControllerCreateEtapa'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, {id: number;data: OrdersControllerCreateEtapaBody}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerCreateEtapa(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>>
    export type OrdersControllerCreateEtapaMutationBody = OrdersControllerCreateEtapaBody
    export type OrdersControllerCreateEtapaMutationError = AxiosError<unknown>

    /**
 * @summary Criar uma nova etapa para uma ordem
 */
export const useOrdersControllerCreateEtapa = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: OrdersControllerCreateEtapaBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateEtapa>>,
        TError,
        {id: number;data: OrdersControllerCreateEtapaBody},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar etapas de uma ordem
 */
export const ordersControllerListEtapasByOrder = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/${id}/etapas`,options
    );
  }


export const getOrdersControllerListEtapasByOrderQueryKey = (id: number,) => {
    return [`/orders/${id}/etapas`] as const;
    }

    
export const getOrdersControllerListEtapasByOrderQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListEtapasByOrderQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>> = ({ signal }) => ordersControllerListEtapasByOrder(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListEtapasByOrderQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>>
export type OrdersControllerListEtapasByOrderQueryError = AxiosError<unknown>


/**
 * @summary Listar etapas de uma ordem
 */

export function useOrdersControllerListEtapasByOrder<TData = Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListEtapasByOrderQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Iniciar uma etapa
 */
export const ordersControllerStartEtapa = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void | Etapa>> => {
    
    
    return axios.post(
      `/orders/etapas/${id}/iniciar`,undefined,options
    );
  }



export const getOrdersControllerStartEtapaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['ordersControllerStartEtapa'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  ordersControllerStartEtapa(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerStartEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerStartEtapa>>>
    
    export type OrdersControllerStartEtapaMutationError = AxiosError<unknown>

    /**
 * @summary Iniciar uma etapa
 */
export const useOrdersControllerStartEtapa = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerStartEtapa>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrdersControllerStartEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalizar uma etapa
 */
export const ordersControllerEndEtapa = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void | Etapa>> => {
    
    
    return axios.post(
      `/orders/etapas/${id}/finalizar`,undefined,options
    );
  }



export const getOrdersControllerEndEtapaMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['ordersControllerEndEtapa'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  ordersControllerEndEtapa(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerEndEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerEndEtapa>>>
    
    export type OrdersControllerEndEtapaMutationError = AxiosError<unknown>

    /**
 * @summary Finalizar uma etapa
 */
export const useOrdersControllerEndEtapa = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerEndEtapa>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrdersControllerEndEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Atualizar o status de uma ordem
 */
export const ordersControllerAtualizarStatus = (
    id: number,
    ordersControllerAtualizarStatusBody: OrdersControllerAtualizarStatusBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void | Order>> => {
    
    
    return axios.post(
      `/orders/${id}/atualizar-status`,
      ordersControllerAtualizarStatusBody,options
    );
  }



export const getOrdersControllerAtualizarStatusMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: OrdersControllerAtualizarStatusBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: OrdersControllerAtualizarStatusBody}, TContext> => {
    
const mutationKey = ['ordersControllerAtualizarStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, {id: number;data: OrdersControllerAtualizarStatusBody}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerAtualizarStatus(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerAtualizarStatusMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>>
    export type OrdersControllerAtualizarStatusMutationBody = OrdersControllerAtualizarStatusBody
    export type OrdersControllerAtualizarStatusMutationError = AxiosError<unknown>

    /**
 * @summary Atualizar o status de uma ordem
 */
export const useOrdersControllerAtualizarStatus = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: OrdersControllerAtualizarStatusBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>,
        TError,
        {id: number;data: OrdersControllerAtualizarStatusBody},
        TContext
      > => {

      const mutationOptions = getOrdersControllerAtualizarStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter detalhes de um pedido por ID
 */
export const ordersControllerFindOne = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/${id}`,options
    );
  }


export const getOrdersControllerFindOneQueryKey = (id: number,) => {
    return [`/orders/${id}`] as const;
    }

    
export const getOrdersControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerFindOne>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerFindOne>>> = ({ signal }) => ordersControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerFindOne>>>
export type OrdersControllerFindOneQueryError = AxiosError<void>


/**
 * @summary Obter detalhes de um pedido por ID
 */

export function useOrdersControllerFindOne<TData = Awaited<ReturnType<typeof ordersControllerFindOne>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listar todos os motivos de interrup√ß√£o
 */
export const ordersControllerListMotivosInterrupcao = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/motivos-interrupcao`,options
    );
  }


export const getOrdersControllerListMotivosInterrupcaoQueryKey = () => {
    return [`/orders/motivos-interrupcao`] as const;
    }

    
export const getOrdersControllerListMotivosInterrupcaoQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListMotivosInterrupcaoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>> = ({ signal }) => ordersControllerListMotivosInterrupcao({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListMotivosInterrupcaoQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>>
export type OrdersControllerListMotivosInterrupcaoQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os motivos de interrup√ß√£o
 */

export function useOrdersControllerListMotivosInterrupcao<TData = Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListMotivosInterrupcaoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Adicionar um novo motivo de interrup√ß√£o
 */
export const ordersControllerCreateMotivoInterrupcao = (
    createMotivoInterrupcaoDto: CreateMotivoInterrupcaoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/orders/motivos-interrupcao`,
      createMotivoInterrupcaoDto,options
    );
  }



export const getOrdersControllerCreateMotivoInterrupcaoMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: CreateMotivoInterrupcaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: CreateMotivoInterrupcaoDto}, TContext> => {
    
const mutationKey = ['ordersControllerCreateMotivoInterrupcao'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, {data: CreateMotivoInterrupcaoDto}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreateMotivoInterrupcao(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateMotivoInterrupcaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>>
    export type OrdersControllerCreateMotivoInterrupcaoMutationBody = CreateMotivoInterrupcaoDto
    export type OrdersControllerCreateMotivoInterrupcaoMutationError = AxiosError<unknown>

    /**
 * @summary Adicionar um novo motivo de interrup√ß√£o
 */
export const useOrdersControllerCreateMotivoInterrupcao = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: CreateMotivoInterrupcaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>,
        TError,
        {data: CreateMotivoInterrupcaoDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateMotivoInterrupcaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo registro no hist√≥rico de produ√ß√£o
 */
export const ordersControllerCreateHistoricoProducao = (
    createHistoricoProducaoDto: CreateHistoricoProducaoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/orders/historico-producao`,
      createHistoricoProducaoDto,options
    );
  }



export const getOrdersControllerCreateHistoricoProducaoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: CreateHistoricoProducaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: CreateHistoricoProducaoDto}, TContext> => {
    
const mutationKey = ['ordersControllerCreateHistoricoProducao'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, {data: CreateHistoricoProducaoDto}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreateHistoricoProducao(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateHistoricoProducaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>>
    export type OrdersControllerCreateHistoricoProducaoMutationBody = CreateHistoricoProducaoDto
    export type OrdersControllerCreateHistoricoProducaoMutationError = AxiosError<void>

    /**
 * @summary Criar um novo registro no hist√≥rico de produ√ß√£o
 */
export const useOrdersControllerCreateHistoricoProducao = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: CreateHistoricoProducaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>,
        TError,
        {data: CreateHistoricoProducaoDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateHistoricoProducaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Atualizar um registro no hist√≥rico de produ√ß√£o
 */
export const ordersControllerUpdateHistoricoProducao = (
    id: number,
    updateHistoricoProducaoDto: UpdateHistoricoProducaoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/orders/historico-producao/${id}`,
      updateHistoricoProducaoDto,options
    );
  }



export const getOrdersControllerUpdateHistoricoProducaoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: UpdateHistoricoProducaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: UpdateHistoricoProducaoDto}, TContext> => {
    
const mutationKey = ['ordersControllerUpdateHistoricoProducao'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, {id: number;data: UpdateHistoricoProducaoDto}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerUpdateHistoricoProducao(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerUpdateHistoricoProducaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>>
    export type OrdersControllerUpdateHistoricoProducaoMutationBody = UpdateHistoricoProducaoDto
    export type OrdersControllerUpdateHistoricoProducaoMutationError = AxiosError<void>

    /**
 * @summary Atualizar um registro no hist√≥rico de produ√ß√£o
 */
export const useOrdersControllerUpdateHistoricoProducao = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: UpdateHistoricoProducaoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>,
        TError,
        {id: number;data: UpdateHistoricoProducaoDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerUpdateHistoricoProducaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar hist√≥rico de produ√ß√£o de um pedido
 */
export const ordersControllerListHistoricoProducao = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/${id}/historico-producao`,options
    );
  }


export const getOrdersControllerListHistoricoProducaoQueryKey = (id: number,) => {
    return [`/orders/${id}/historico-producao`] as const;
    }

    
export const getOrdersControllerListHistoricoProducaoQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListHistoricoProducaoQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>> = ({ signal }) => ordersControllerListHistoricoProducao(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListHistoricoProducaoQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>>
export type OrdersControllerListHistoricoProducaoQueryError = AxiosError<void>


/**
 * @summary Listar hist√≥rico de produ√ß√£o de um pedido
 */

export function useOrdersControllerListHistoricoProducao<TData = Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListHistoricoProducaoQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listar todos os rastreamentos de uma ordem
 */
export const ordersControllerListRastreamentosByOrder = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/orders/${id}/rastreamentos`,options
    );
  }


export const getOrdersControllerListRastreamentosByOrderQueryKey = (id: number,) => {
    return [`/orders/${id}/rastreamentos`] as const;
    }

    
export const getOrdersControllerListRastreamentosByOrderQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListRastreamentosByOrderQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>> = ({ signal }) => ordersControllerListRastreamentosByOrder(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListRastreamentosByOrderQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>>
export type OrdersControllerListRastreamentosByOrderQueryError = AxiosError<void>


/**
 * @summary Listar todos os rastreamentos de uma ordem
 */

export function useOrdersControllerListRastreamentosByOrder<TData = Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListRastreamentosByOrderQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar um novo usu√°rio
 */
export const authControllerRegister = (
    createAuthDto: CreateAuthDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/auth/register`,
      createAuthDto,options
    );
  }



export const getAuthControllerRegisterMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateAuthDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateAuthDto}, TContext> => {
    
const mutationKey = ['authControllerRegister'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: CreateAuthDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = CreateAuthDto
    export type AuthControllerRegisterMutationError = AxiosError<void>

    /**
 * @summary Criar um novo usu√°rio
 */
export const useAuthControllerRegister = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateAuthDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRegister>>,
        TError,
        {data: CreateAuthDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fazer login
 */
export const authControllerLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/auth/login`,
      loginDto,options
    );
  }



export const getAuthControllerLoginMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {
    
const mutationKey = ['authControllerLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = AxiosError<void>

    /**
 * @summary Fazer login
 */
export const useAuthControllerLogin = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter informa√ß√µes do usu√°rio autenticado
 */
export const authControllerGetProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/auth/me`,options
    );
  }


export const getAuthControllerGetProfileQueryKey = () => {
    return [`/auth/me`] as const;
    }

    
export const getAuthControllerGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) => authControllerGetProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetProfile>>>
export type AuthControllerGetProfileQueryError = AxiosError<void>


/**
 * @summary Obter informa√ß√µes do usu√°rio autenticado
 */

export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthControllerGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Validar token de acesso
 */
export const authControllerValidateToken = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/auth/validate-token`,undefined,options
    );
  }



export const getAuthControllerValidateTokenMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext> => {
    
const mutationKey = ['authControllerValidateToken'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerValidateToken>>, void> = () => {
          

          return  authControllerValidateToken(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerValidateTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerValidateToken>>>
    
    export type AuthControllerValidateTokenMutationError = AxiosError<void>

    /**
 * @summary Validar token de acesso
 */
export const useAuthControllerValidateToken = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerValidateToken>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerValidateTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo funcion√°rio
 */
export const funcionarioControllerCreate = (
    createFuncionarioDto: CreateFuncionarioDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/funcionario`,
      createFuncionarioDto,options
    );
  }



export const getFuncionarioControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: CreateFuncionarioDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: CreateFuncionarioDto}, TContext> => {
    
const mutationKey = ['funcionarioControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerCreate>>, {data: CreateFuncionarioDto}> = (props) => {
          const {data} = props ?? {};

          return  funcionarioControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerCreate>>>
    export type FuncionarioControllerCreateMutationBody = CreateFuncionarioDto
    export type FuncionarioControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Criar um novo funcion√°rio
 */
export const useFuncionarioControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: CreateFuncionarioDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerCreate>>,
        TError,
        {data: CreateFuncionarioDto},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os funcion√°rios
 */
export const funcionarioControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/funcionario`,options
    );
  }


export const getFuncionarioControllerFindAllQueryKey = () => {
    return [`/funcionario`] as const;
    }

    
export const getFuncionarioControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFuncionarioControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof funcionarioControllerFindAll>>> = ({ signal }) => funcionarioControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type FuncionarioControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerFindAll>>>
export type FuncionarioControllerFindAllQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os funcion√°rios
 */

export function useFuncionarioControllerFindAll<TData = Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFuncionarioControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um funcion√°rio pelo ID
 */
export const funcionarioControllerFindOne = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/funcionario/${id}`,options
    );
  }


export const getFuncionarioControllerFindOneQueryKey = (id: number,) => {
    return [`/funcionario/${id}`] as const;
    }

    
export const getFuncionarioControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFuncionarioControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof funcionarioControllerFindOne>>> = ({ signal }) => funcionarioControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type FuncionarioControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerFindOne>>>
export type FuncionarioControllerFindOneQueryError = AxiosError<void>


/**
 * @summary Obter um funcion√°rio pelo ID
 */

export function useFuncionarioControllerFindOne<TData = Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFuncionarioControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um funcion√°rio pelo ID
 */
export const funcionarioControllerUpdate = (
    id: number,
    updateFuncionarioDto: UpdateFuncionarioDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/funcionario/${id}`,
      updateFuncionarioDto,options
    );
  }



export const getFuncionarioControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: UpdateFuncionarioDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: UpdateFuncionarioDto}, TContext> => {
    
const mutationKey = ['funcionarioControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, {id: number;data: UpdateFuncionarioDto}> = (props) => {
          const {id,data} = props ?? {};

          return  funcionarioControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerUpdate>>>
    export type FuncionarioControllerUpdateMutationBody = UpdateFuncionarioDto
    export type FuncionarioControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Atualizar um funcion√°rio pelo ID
 */
export const useFuncionarioControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: UpdateFuncionarioDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerUpdate>>,
        TError,
        {id: number;data: UpdateFuncionarioDto},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um funcion√°rio pelo ID
 */
export const funcionarioControllerRemove = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/funcionario/${id}`,options
    );
  }



export const getFuncionarioControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['funcionarioControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  funcionarioControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerRemove>>>
    
    export type FuncionarioControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Remover um funcion√°rio pelo ID
 */
export const useFuncionarioControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo gestor
 */
export const gestaoControllerCreate = (
    createGestorDto: CreateGestorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/gestao`,
      createGestorDto,options
    );
  }



export const getGestaoControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: CreateGestorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: CreateGestorDto}, TContext> => {
    
const mutationKey = ['gestaoControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerCreate>>, {data: CreateGestorDto}> = (props) => {
          const {data} = props ?? {};

          return  gestaoControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerCreate>>>
    export type GestaoControllerCreateMutationBody = CreateGestorDto
    export type GestaoControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Criar um novo gestor
 */
export const useGestaoControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: CreateGestorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerCreate>>,
        TError,
        {data: CreateGestorDto},
        TContext
      > => {

      const mutationOptions = getGestaoControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os gestores
 */
export const gestaoControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/gestao`,options
    );
  }


export const getGestaoControllerFindAllQueryKey = () => {
    return [`/gestao`] as const;
    }

    
export const getGestaoControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGestaoControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gestaoControllerFindAll>>> = ({ signal }) => gestaoControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type GestaoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerFindAll>>>
export type GestaoControllerFindAllQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os gestores
 */

export function useGestaoControllerFindAll<TData = Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGestaoControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um gestor pelo ID
 */
export const gestaoControllerFindOne = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/gestao/${id}`,options
    );
  }


export const getGestaoControllerFindOneQueryKey = (id: number,) => {
    return [`/gestao/${id}`] as const;
    }

    
export const getGestaoControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGestaoControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gestaoControllerFindOne>>> = ({ signal }) => gestaoControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type GestaoControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerFindOne>>>
export type GestaoControllerFindOneQueryError = AxiosError<void>


/**
 * @summary Obter um gestor pelo ID
 */

export function useGestaoControllerFindOne<TData = Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGestaoControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um gestor pelo ID
 */
export const gestaoControllerUpdate = (
    id: number,
    updateGestorDto: UpdateGestorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/gestao/${id}`,
      updateGestorDto,options
    );
  }



export const getGestaoControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: UpdateGestorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: UpdateGestorDto}, TContext> => {
    
const mutationKey = ['gestaoControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerUpdate>>, {id: number;data: UpdateGestorDto}> = (props) => {
          const {id,data} = props ?? {};

          return  gestaoControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerUpdate>>>
    export type GestaoControllerUpdateMutationBody = UpdateGestorDto
    export type GestaoControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Atualizar um gestor pelo ID
 */
export const useGestaoControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: UpdateGestorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerUpdate>>,
        TError,
        {id: number;data: UpdateGestorDto},
        TContext
      > => {

      const mutationOptions = getGestaoControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um gestor pelo ID
 */
export const gestaoControllerRemove = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/gestao/${id}`,options
    );
  }



export const getGestaoControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['gestaoControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  gestaoControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerRemove>>>
    
    export type GestaoControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Remover um gestor pelo ID
 */
export const useGestaoControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getGestaoControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo produto
 */
export const productsControllerCreate = (
    createProductDto: CreateProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/products`,
      createProductDto,options
    );
  }



export const getProductsControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: CreateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: CreateProductDto}, TContext> => {
    
const mutationKey = ['productsControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerCreate>>, {data: CreateProductDto}> = (props) => {
          const {data} = props ?? {};

          return  productsControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerCreate>>>
    export type ProductsControllerCreateMutationBody = CreateProductDto
    export type ProductsControllerCreateMutationError = AxiosError<unknown>

    /**
 * @summary Criar um novo produto
 */
export const useProductsControllerCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: CreateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerCreate>>,
        TError,
        {data: CreateProductDto},
        TContext
      > => {

      const mutationOptions = getProductsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os produtos
 */
export const productsControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/products`,options
    );
  }


export const getProductsControllerFindAllQueryKey = () => {
    return [`/products`] as const;
    }

    
export const getProductsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof productsControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFindAll>>> = ({ signal }) => productsControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindAll>>>
export type ProductsControllerFindAllQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os produtos
 */

export function useProductsControllerFindAll<TData = Awaited<ReturnType<typeof productsControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProductsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Buscar um produto por ID
 */
export const productsControllerFindOne = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/products/${id}`,options
    );
  }


export const getProductsControllerFindOneQueryKey = (id: number,) => {
    return [`/products/${id}`] as const;
    }

    
export const getProductsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof productsControllerFindOne>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFindOne>>> = ({ signal }) => productsControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindOne>>>
export type ProductsControllerFindOneQueryError = AxiosError<unknown>


/**
 * @summary Buscar um produto por ID
 */

export function useProductsControllerFindOne<TData = Awaited<ReturnType<typeof productsControllerFindOne>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProductsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um produto existente
 */
export const productsControllerUpdate = (
    id: number,
    updateProductDto: UpdateProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/products/${id}`,
      updateProductDto,options
    );
  }



export const getProductsControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: UpdateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: UpdateProductDto}, TContext> => {
    
const mutationKey = ['productsControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerUpdate>>, {id: number;data: UpdateProductDto}> = (props) => {
          const {id,data} = props ?? {};

          return  productsControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdate>>>
    export type ProductsControllerUpdateMutationBody = UpdateProductDto
    export type ProductsControllerUpdateMutationError = AxiosError<unknown>

    /**
 * @summary Atualizar um produto existente
 */
export const useProductsControllerUpdate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: UpdateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerUpdate>>,
        TError,
        {id: number;data: UpdateProductDto},
        TContext
      > => {

      const mutationOptions = getProductsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Excluir um produto
 */
export const productsControllerRemove = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/products/${id}`,options
    );
  }



export const getProductsControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['productsControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  productsControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerRemove>>>
    
    export type ProductsControllerRemoveMutationError = AxiosError<unknown>

    /**
 * @summary Excluir um produto
 */
export const useProductsControllerRemove = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProductsControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo setor
 */
export const sectorsControllerCreate = (
    createSectorDto: CreateSectorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/sectors`,
      createSectorDto,options
    );
  }



export const getSectorsControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: CreateSectorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: CreateSectorDto}, TContext> => {
    
const mutationKey = ['sectorsControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerCreate>>, {data: CreateSectorDto}> = (props) => {
          const {data} = props ?? {};

          return  sectorsControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerCreate>>>
    export type SectorsControllerCreateMutationBody = CreateSectorDto
    export type SectorsControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Criar um novo setor
 */
export const useSectorsControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: CreateSectorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerCreate>>,
        TError,
        {data: CreateSectorDto},
        TContext
      > => {

      const mutationOptions = getSectorsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os setores
 */
export const sectorsControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/sectors`,options
    );
  }


export const getSectorsControllerFindAllQueryKey = () => {
    return [`/sectors`] as const;
    }

    
export const getSectorsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSectorsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sectorsControllerFindAll>>> = ({ signal }) => sectorsControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type SectorsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerFindAll>>>
export type SectorsControllerFindAllQueryError = AxiosError<unknown>


/**
 * @summary Listar todos os setores
 */

export function useSectorsControllerFindAll<TData = Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSectorsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um setor pelo ID
 */
export const sectorsControllerFindOne = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/sectors/${id}`,options
    );
  }


export const getSectorsControllerFindOneQueryKey = (id: number,) => {
    return [`/sectors/${id}`] as const;
    }

    
export const getSectorsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError = AxiosError<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSectorsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sectorsControllerFindOne>>> = ({ signal }) => sectorsControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type SectorsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerFindOne>>>
export type SectorsControllerFindOneQueryError = AxiosError<void>


/**
 * @summary Obter um setor pelo ID
 */

export function useSectorsControllerFindOne<TData = Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSectorsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um setor pelo ID
 */
export const sectorsControllerUpdate = (
    id: number,
    updateSectorDto: UpdateSectorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/sectors/${id}`,
      updateSectorDto,options
    );
  }



export const getSectorsControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: UpdateSectorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: UpdateSectorDto}, TContext> => {
    
const mutationKey = ['sectorsControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerUpdate>>, {id: number;data: UpdateSectorDto}> = (props) => {
          const {id,data} = props ?? {};

          return  sectorsControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerUpdate>>>
    export type SectorsControllerUpdateMutationBody = UpdateSectorDto
    export type SectorsControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Atualizar um setor pelo ID
 */
export const useSectorsControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: UpdateSectorDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerUpdate>>,
        TError,
        {id: number;data: UpdateSectorDto},
        TContext
      > => {

      const mutationOptions = getSectorsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um setor pelo ID
 */
export const sectorsControllerRemove = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/sectors/${id}`,options
    );
  }



export const getSectorsControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['sectorsControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  sectorsControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerRemove>>>
    
    export type SectorsControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Remover um setor pelo ID
 */
export const useSectorsControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getSectorsControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Adicionar uma configura√ß√£o personalizada a um setor
 */
export const sectorsControllerAddConfig = (
    id: number,
    addSectorConfigDto: AddSectorConfigDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/sectors/${id}/config`,
      addSectorConfigDto,options
    );
  }



export const getSectorsControllerAddConfigMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: AddSectorConfigDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: AddSectorConfigDto}, TContext> => {
    
const mutationKey = ['sectorsControllerAddConfig'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, {id: number;data: AddSectorConfigDto}> = (props) => {
          const {id,data} = props ?? {};

          return  sectorsControllerAddConfig(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerAddConfigMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerAddConfig>>>
    export type SectorsControllerAddConfigMutationBody = AddSectorConfigDto
    export type SectorsControllerAddConfigMutationError = AxiosError<unknown>

    /**
 * @summary Adicionar uma configura√ß√£o personalizada a um setor
 */
export const useSectorsControllerAddConfig = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: AddSectorConfigDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerAddConfig>>,
        TError,
        {id: number;data: AddSectorConfigDto},
        TContext
      > => {

      const mutationOptions = getSectorsControllerAddConfigMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
