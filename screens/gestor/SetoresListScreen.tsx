import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, StyleSheet, TouchableOpacity, ActivityIndicator, Alert } from 'react-native';
import { COLORS } from '@/constants/colors'; // Adjust path if needed
import { useSectorControllerFindAll } from '@/api/generated'; // Adjust path if needed
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';

const SetoresListScreen = () => {
  const router = useRouter();
  const [isLoadingUserCheck, setIsLoadingUserCheck] = useState(true);

  // Check if user is a logged-in gestor
  useEffect(() => {
    const checkUserRole = async () => {
      try {
        const token = await AsyncStorage.getItem('accessToken');
        const userRole = await AsyncStorage.getItem('userRole');

        if (!token || userRole !== 'gestor') {
          router.replace('/(login)/login');// Adjust route as needed
        }
      } catch (error) {
        console.error('Failed to check user role from storage:', error);
        Alert.alert('Erro', 'Falha ao verificar permissões. Por favor, faça login novamente.');
        router.replace('/(login)/login'); // Adjust route as needed
      } finally {
        setIsLoadingUserCheck(false);
      }
    };

    checkUserRole();
  }, [router]);

  // Fetch all sectors using the hook generated by Orval
  const { data: setoresResponse, isLoading: isLoadingSetores, error: setoresError, refetch } = useSectorControllerFindAll({
    query: {
      enabled: !isLoadingUserCheck, // Only run query after user check is complete
    }
  });

  // Assuming the API returns { data: Sector[] }
  const setores = setoresResponse?.data || [];

  // Handle API errors
  useEffect(() => {
    if (setoresError) {
      console.error('Error fetching sectors:', setoresError);
      Alert.alert('Erro', 'Não foi possível carregar a lista de setores.');
    }
  }, [setoresError]);

  // Refetch data when the screen is focused
  useEffect(() => {
    const unsubscribe = router.addListener('focus', () => {
      if (!isLoadingUserCheck) {
        refetch();
      }
    });

    return unsubscribe;
  }, [router, refetch, isLoadingUserCheck]);

  if (isLoadingUserCheck || isLoadingSetores) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>Carregando setores...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Gerenciar Setores</Text>
        <TouchableOpacity 
          style={styles.createButton}
          onPress={() => router.push('/(home)/SetorCreateScreen')} // Adjust route as needed
        >
          <Text style={styles.createButtonText}>+ Novo Setor</Text>
        </TouchableOpacity>
      </View>

      {setores.length > 0 ? (
        <FlatList
          data={setores}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContent}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={styles.itemCard}
              // Adjust route path and params for expo-router
              onPress={() => router.push({ pathname: '/(home)/SetorDetailScreen', params: { setorId: item.id }})}
            >
              <View style={styles.itemHeader}>
                <Text style={styles.itemTitle}>{item.name}</Text>
                <Text style={styles.itemSubtitle}>Código: {item.code}</Text>
              </View>
              
              <View style={styles.itemDetails}>
                <Text style={styles.itemDetailText}>
                  <Text style={styles.itemDetailLabel}>Descrição: </Text>
                  {item.description || 'Não especificada'}
                </Text>
                {/* Add more details if needed */}
              </View>
            </TouchableOpacity>
          )}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>Nenhum setor cadastrado.</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.background,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: COLORS.text?.secondary || '#666',
  },
  header: {
    backgroundColor: COLORS.primary,
    padding: 20,
    paddingTop: 40,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.white,
  },
  createButton: {
    backgroundColor: COLORS.accent || '#FFC107',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
  },
  createButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 14,
  },
  listContent: {
    padding: 16,
  },
  itemCard: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  itemHeader: {
    marginBottom: 12,
  },
  itemTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text?.primary || '#333',
  },
  itemSubtitle: {
    fontSize: 14,
    color: COLORS.text?.secondary || '#666',
    marginTop: 4,
  },
  itemDetails: {
    marginTop: 8,
  },
  itemDetailText: {
    fontSize: 14,
    color: COLORS.text?.secondary || '#666',
    marginBottom: 4,
  },
  itemDetailLabel: {
    fontWeight: 'bold',
    color: COLORS.text?.primary || '#333',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    fontSize: 16,
    color: COLORS.text?.secondary || '#666',
    textAlign: 'center',
  },
});

export default SetoresListScreen;

