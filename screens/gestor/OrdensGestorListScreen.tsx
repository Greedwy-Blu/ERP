import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, StyleSheet, TouchableOpacity, ActivityIndicator, Alert } from 'react-native';
import { COLORS } from '@/constants/colors'; // Adjust path if needed
import { useOrdersControllerFindAll } from '@/api/generated'; // Adjust path if needed
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';

const OrdensGestorListScreen = () => {
  const router = useRouter();
  const [isLoadingUserCheck, setIsLoadingUserCheck] = useState(true);

  // Check if user is a logged-in gestor
  useEffect(() => {
    const checkUserRole = async () => {
      try {
        const token = await AsyncStorage.getItem('accessToken');
        const userRole = await AsyncStorage.getItem('userRole');

        if (!token || userRole !== 'gestor') {
          // If no token or role is not gestor, redirect to login
          router.replace('/(login)/login');; // Adjust route as needed
        }
      } catch (error) {
        console.error('Failed to check user role from storage:', error);
        Alert.alert('Erro', 'Falha ao verificar permissões. Por favor, faça login novamente.');
        router.replace('/(login)/login'); // Adjust route as needed
      } finally {
        setIsLoadingUserCheck(false);
      }
    };

    checkUserRole();
  }, [router]);

  // Fetch all orders using the hook generated by Orval
  // Gestor sees all orders, no filtering needed by default
  const { data: ordensResponse, isLoading: isLoadingOrdens, error: ordensError, refetch } = useOrdersControllerFindAll({
    query: {
      enabled: !isLoadingUserCheck, // Only run query after user check is complete
    }
  });

  // Assuming the API returns { data: Order[] }
  const ordens = ordensResponse?.data || [];

  // Function to get status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'aberto': return COLORS.accent;
      case 'em_andamento': return COLORS.secondary;
      case 'interrompido': return COLORS.warning;
      case 'finalizado': return COLORS.success;
      default: return COLORS.gray;
    }
  };

  // Function to format date
  const formatDate = (dateString) => {
    if (!dateString) return 'Data não disponível';
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
  };

  // Handle API errors
  useEffect(() => {
    if (ordensError) {
      console.error('Error fetching orders:', ordensError);
      Alert.alert('Erro', 'Não foi possível carregar as ordens de serviço.');
    }
  }, [ordensError]);

  // Refetch data when the screen is focused
  useEffect(() => {
    const unsubscribe = router.addListener('focus', () => {
      if (!isLoadingUserCheck) {
        refetch();
      }
    });

    return unsubscribe;
  }, [router, refetch, isLoadingUserCheck]);

  if (isLoadingUserCheck || isLoadingOrdens) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>Carregando ordens de serviço...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Todas as Ordens de Serviço</Text>
        <TouchableOpacity 
          style={styles.createButton}
          onPress={() => router.push('/(home)/OrdemCreateScreen')} // Adjust route as needed
        >
          <Text style={styles.createButtonText}>+ Criar Ordem</Text>
        </TouchableOpacity>
      </View>

      {ordens.length > 0 ? (
        <FlatList
          data={ordens}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContent}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={styles.orderCard}
              // Adjust route path and params for expo-router
              onPress={() => router.push({ pathname: '/(home)/OrdemGestorDetailScreen', params: { orderId: item.id }})}
            >
              <View style={styles.orderHeader}>
                <Text style={styles.orderTitle}>OP-{item.id}</Text>
                <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>
                  <Text style={styles.statusText}>{item.status}</Text>
                </View>
              </View>
              
              <View style={styles.orderDetails}>
                <Text style={styles.orderDetailText}>
                  <Text style={styles.orderDetailLabel}>Produto: </Text>
                  {item.product?.name || 'Não especificado'}
                </Text>
                
                <Text style={styles.orderDetailText}>
                  <Text style={styles.orderDetailLabel}>Quantidade: </Text>
                  {item.quantity || 'Não especificada'}
                </Text>

                <Text style={styles.orderDetailText}>
                  <Text style={styles.orderDetailLabel}>Funcionário: </Text>
                  {item.funcionario?.nome || 'Não atribuído'}
                </Text>
                
                <Text style={styles.orderDetailText}>
                  <Text style={styles.orderDetailLabel}>Criado em: </Text>
                  {formatDate(item.createdAt)}
                </Text>
              </View>
            </TouchableOpacity>
          )}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>Nenhuma ordem de serviço encontrada.</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.background,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: COLORS.text?.secondary || '#666',
  },
  header: {
    backgroundColor: COLORS.primary,
    padding: 20,
    paddingTop: 40,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.white,
  },
  createButton: {
    backgroundColor: COLORS.accent || '#FFC107', // Example accent color
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
  },
  createButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 14,
  },
  listContent: {
    padding: 16,
  },
  orderCard: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  orderTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text?.primary || '#333',
  },
  statusBadge: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 12,
  },
  statusText: {
    color: COLORS.white,
    fontSize: 12,
    fontWeight: 'bold',
  },
  orderDetails: {
    marginTop: 8,
  },
  orderDetailText: {
    fontSize: 14,
    color: COLORS.text?.secondary || '#666',
    marginBottom: 4,
  },
  orderDetailLabel: {
    fontWeight: 'bold',
    color: COLORS.text?.primary || '#333',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    fontSize: 16,
    color: COLORS.text?.secondary || '#666',
    textAlign: 'center',
  },
});

export default OrdensGestorListScreen;

